openapi: 3.0.0
info:
  title: Brunch Voting API
  version: 1.1.1
  description: API for managing Brunch voting
servers:
  - url: http:localhost:8080/api
    description: Local development server
  - url: https://denic0la.ch/api
    description: Production server

tags:
  - name: Admin
    description: Operations for administrating Brunches
  - name: Voting
    description: Operations for voting on Brunches


paths:
  /brunches:
    post:
      summary: Create new Brunch
      description: Save a new brunch with questions and voting options
      operationId: createBrunch
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrunchCreate'
      responses:
        '201':
          description: Brunch created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrunchInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

    get:
      summary: Get Brunches
      description: Retrieve a list of all brunch IDs
      operationId: getAllBrunches
      tags:
        - Admin
      responses:
        '200':
          description: List of all brunch IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BrunchId'
              examples:
                default:
                  summary: Default brunch IDs
                  value: [ "PI-25-3-Rudolf", "2025-Q1-Confidence" ]

  /brunches/{brunchId}:
    get:
      security:
        - VotingPassword: [ ]
        - AdminPassword: [ ]
        - { }
      summary: Get Brunch
      description: Retrieve details of a specific brunch by ID
      operationId: getBrunchById
      parameters:
        - $ref: '#/components/parameters/BrunchIdParam'
      tags:
        - Voting
      responses:
        '200':
          description: Brunch details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrunchInfo'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    put:
      security:
        - AdminPassword: [ ]
        - { }
      summary: Edit Brunch
      description: Edit an existing brunch by ID (admin password required)
      operationId: updateBrunchById
      tags:
        - Admin
      parameters:
        - $ref: '#/components/parameters/BrunchIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrunchUpdate'
      responses:
        '200':
          description: Brunch updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrunchInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete Brunch
      description: Delete a specific brunch by ID (admin password required)
      operationId: deleteBrunchById
      tags:
        - Admin
      parameters:
        - $ref: '#/components/parameters/BrunchIdParam'
      security:
        - AdminPassword: [ ]
        - { }
      responses:
        '204':
          description: Brunch deleted successfully
          content: { }
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '403':
          $ref: '#/components/responses/Forbidden'

  /brunches/{brunchId}/vote:
    post:
      security:
        - VotingPassword: [ ]
        - { }
      summary: Vote on Brunch
      description: Submit a vote for a specific brunch
      operationId: createVoteOnBrunchById
      tags:
        - Voting
      parameters:
        - $ref: '#/components/parameters/BrunchIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrunchVote'
      responses:
        '200':
          description: Vote submitted successfully
          content: { }
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /brunches/{brunchId}/results:
    get:
      security:
        - AdminPassword: [ ]
        - { }
      summary: Get Voting Results for Brunch
      tags:
        - Admin
      operationId: getResultsForBrunchById
      description: Retrieve voting results for a specific brunch by ID
      parameters:
        - $ref: '#/components/parameters/BrunchIdParam'
      responses:
        '200':
          description: Brunch results retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BrunchVote'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  parameters:
    BrunchIdParam:
      name: brunchId
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/BrunchId'

  schemas:
    BrunchId:
      type: string
      minLength: 3
      maxLength: 50
      example: "PI-25-3-Rudolf"
      pattern: "^[a-zA-Z0-9-]+$"

    BrunchBase:
      type: object
      required: [ title ]
      properties:
        title:
          type: string
          description: Title of the brunch
          example: "Planning 25-3 Team Rudolf Confidence Voting"
        requireEmail:
          type: boolean
          default: false
        emailRegexp:
          type: string
          nullable: true
          default: null
          example: "^[a-zA-Z0-9._%+-]+@company\\.ch$"
          pattern: ^\/.*\/[gimsuy]*$
          description: Optional regex to validate email
        adminPassword:
          type: string
          nullable: true
          description: Admin password required for editing and viewing results
          writeOnly: true
          default: null
          example: "admin123"
        votingPassword:
          type: string
          nullable: true
          description: Password required for voting
          writeOnly: true
          default: null

    BrunchCreate:
      allOf:
        - $ref: '#/components/schemas/BrunchBase'
        - type: object
          required: [ id, questions ]
          properties:
            id:
              $ref: '#/components/schemas/BrunchId'
            questions:
              type: array
              minItems: 1
              uniqueItems: true
              items:
                $ref: '#/components/schemas/BrunchQuestion'

    BrunchUpdate:
      allOf:
        - $ref: '#/components/schemas/BrunchBase'
        - type: object
          required: [ questions ]
          properties:
            questions:
              type: array
              minItems: 1
              uniqueItems: true
              items:
                $ref: '#/components/schemas/BrunchQuestion'

    BrunchInfo:
      allOf:
        - $ref: '#/components/schemas/BrunchBase'
        - type: object
          required: [ questions ]
          properties:
            id:
              allOf:
                - $ref: '#/components/schemas/BrunchId'
                - readOnly: true
            questions:
              type: array
              minItems: 1
              uniqueItems: true
              items:
                $ref: '#/components/schemas/BrunchQuestionInfo'

    BrunchQuestionBase:
      type: object
      required: [ id, min, max ]
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          nullable: true
          example: "How confident are you in the project?"
        link:
          type: string
          format: uri
          nullable: true
          example: "https://github.com/DeNic0la"
        min:
          type: integer
          default: 1
          minimum: 0
        max:
          type: integer
          default: 5
          maximum: 13
        optional:
          type: boolean
          default: false

    BrunchQuestionInfo:
      allOf:
        - $ref: '#/components/schemas/BrunchQuestionBase'
        - type: object
          properties:
            order:
              type: integer
              nullable: false
              example: 1
            recommended:
              type: integer
              example: 1
              description: Recommended value (must be between min and max)

    BrunchQuestion:
      allOf:
        - $ref: '#/components/schemas/BrunchQuestionBase'
        - type: object
          properties:
            order:
              type: integer
              nullable: true
              example: 1
            recommended:
              type: integer
              nullable: true
              example: 5
              description: Recommended value (must be between min and max)

    BrunchVote:
      type: object
      required: [ name, answers ]
      properties:
        name:
          type: string
          example: "Anonymous"
          description: Name of the voter
        email:
          type: string
          nullable: true
          format: email
          example: "user@company.ch"
        answers:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/BrunchAnswer'
      example:
        name: "Jane Smith"
        email: "jane.smith@company.ch"
        answers:
          - questionId: 1
            value: 5
          - questionId: 2
            value: 4

    BrunchAnswer:
      type: object
      required: [ questionId, value ]
      properties:
        questionId:
          type: integer
        value:
          type: integer
          example: 3
          description: Must be between min and max as defined in the question
    ErrorResponse:
      type: object
      required: [ code, message ]
      properties:
        code:
          type: integer
          description: Error code
          example: 400
        message:
          type: string
          description: Error message
          example: "Invalid input data"
        details:
          type: string
          nullable: true
          description: Additional error details not meant for end users
          example: "The email format is invalid"

  securitySchemes:
    AdminPassword:
      type: apiKey
      in: header
      name: X-ADMIN-PASSWORD
    VotingPassword:
      type: apiKey
      in: header
      name: X-VOTING-PASSWORD


  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 400
            message: "Bad Request"
            details: "The provided data does not meet the required format or constraints."
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 401
            message: "Unauthorized access"
            details: "You must provide a valid admin password to access this resource."
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 403
            message: "Access forbidden"
            details: "You do not have permission to perform this action."
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 404
            message: "Brunch not found"
            details: "The requested brunch ID does not exist in the system."
    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 409
            message: "Brunch ID already exists"
            details: "The provided brunch ID is already in use. Please choose a different ID."



